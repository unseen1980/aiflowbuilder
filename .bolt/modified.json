[["/home/project/app/pipeline-editor/page.tsx","\"use client\"\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport ReactFlow, { \n  addEdge, \n  MiniMap, \n  Controls, \n  Background, \n  useNodesState, \n  useEdgesState,\n  Panel,\n  Connection,\n  Edge,\n  Node,\n  BackgroundVariant,\n  ReactFlowProvider\n} from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { useToast } from \"@/components/ui/use-toast\"\n\nconst initialNodes: Node[] = [\n  {\n    id: 'input',\n    type: 'input',\n    data: { label: 'Input' },\n    position: { x: 250, y: 25 },\n  },\n  {\n    id: 'output',\n    type: 'output',\n    data: { label: 'Output' },\n    position: { x: 250, y: 500 },\n  },\n];\n\nexport default function PipelineEditor() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const [pipelineName, setPipelineName] = useState('');\n  const { toast } = useToast()\n\n  const onConnect = useCallback((params: Connection) => setEdges((eds) => addEdge(params, eds)), [setEdges]);\n\n  const addNode = (type: string) => {\n    const newNode = {\n      id: `${type}-${Date.now()}`,\n      type: 'default',\n      position: { x: Math.random() * 300 + 100, y: Math.random() * 300 + 100 },\n      data: { label: type },\n    };\n    setNodes((nds) => nds.concat(newNode));\n  };\n\n  const handleSavePipeline = async () => {\n    // ... (rest of the function remains the same)\n  };\n\n  const handleExecutePipeline = async () => {\n    // ... (rest of the function remains the same)\n  };\n\n  return (\n    <ReactFlowProvider>\n      <div style={{ width: '100%', height: 'calc(100vh - 60px)' }}>\n        <ReactFlow\n          nodes={nodes}\n          edges={edges}\n          onNodesChange={onNodesChange}\n          onEdgesChange={onEdgesChange}\n          onConnect={onConnect}\n          fitView={false}\n          defaultViewport={{ x: 0, y: 0, zoom: 1 }}\n        >\n          <Controls />\n          <MiniMap />\n          <Background variant={BackgroundVariant.Dots} gap={12} size={1} />\n          <Panel position=\"top-left\" className=\"bg-background p-4 rounded-lg shadow\">\n            <h3 className=\"text-lg font-semibold mb-2\">Add Action</h3>\n            <div className=\"flex flex-wrap gap-2\">\n              <Button onClick={() => addNode('Parse URL')}>Parse URL</Button>\n              <Button onClick={() => addNode('Clean Data')}>Clean Data</Button>\n              <Button onClick={() => addNode('Anonymize')}>Anonymize</Button>\n              <Button onClick={() => addNode('Extract Entities')}>Extract Entities</Button>\n              <Button onClick={() => addNode('Summarize')}>Summarize</Button>\n            </div>\n          </Panel>\n          <Panel position=\"top-right\" className=\"bg-background p-4 rounded-lg shadow\">\n            <Label htmlFor=\"pipeline-name\">Pipeline Name</Label>\n            <Input\n              id=\"pipeline-name\"\n              value={pipelineName}\n              onChange={(e) => setPipelineName(e.target.value)}\n              placeholder=\"Enter pipeline name\"\n              className=\"mb-2\"\n            />\n            <div className=\"flex space-x-2\">\n              <Button onClick={handleSavePipeline}>Save Pipeline</Button>\n              <Button onClick={handleExecutePipeline}>Execute Pipeline</Button>\n            </div>\n          </Panel>\n        </ReactFlow>\n      </div>\n    </ReactFlowProvider>\n  );\n}"]]